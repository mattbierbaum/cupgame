import numpy as np
import scipy as sp
import pylab as pl
from scipy.optimize import fmin
import matplotlib as mpl
import mpl_toolkits.mplot3d as mp3d
import mpl_toolkits.mplot3d.axes3d as a3

def position(x0, v0, t):
    a = np.array([0,0,-1])
    return x0+v0*t+0.5*a*t**2, 0
    #return np.modf(x0+v0*t+0.5*a*t**2)

def velocity(v0, t):
    a = np.array([0,0,-1])
    return v0 + a*t

def distance_to_torus(t, x0, v0, hsq, rsq):
    r,n = position(x0, v0, t)
    rt,n = np.modf(r)
    r = rt-n
    return abs((r.dot(r) + hsq - rsq)**2 - 4*hsq*(r[0]*r[0] + r[1]*r[1]))

def collision_time(x0, v0, hsq, rsq):
    topt, fopt, iter, funcalls, warnflag = fmin(distance_to_torus, x0=[1], 
            args=(x0, v0, hsq, rsq), disp=0, maxiter=50, full_output=1, xtol=1e-3)
    return topt, fopt

def collision_resultant(pos, vel, h):
    rt,n = np.modf(pos)
    r = rt-n

    x,y,z = r 
    theta = np.arctan2(y,x)
    yin = h*np.sin(theta)
    xin = h*np.cos(theta)
   
    dr = r-np.array([xin, yin, 0])
    dr = 0.07*dr / np.sqrt(dr.dot(dr))
    return (pos, pos+dr)

def plotPoints(x,y,z):
    fig = pl.figure()
    axs = a3.Axes3D(fig)
    axs.scatter(x,y,z)
    pl.show()
    
def plotPorcupine(lines, x, y, z):
    segs = mp3d.art3d.Line3DCollection(lines)
    fig = pl.figure()
    axs = a3.Axes3D(fig)
    axs.scatter(x,y,z)
    axs.add_collection3d(segs)
    pl.show()

def testscan():
    m = 1.0
    N = 20
    r = 0.3
    h = 1-r

    hsq, rsq = h*h, r*r

    x0 = np.array([0, 0, 1])
    v0 = np.array([0, 0, 0])
    out = np.zeros((N,N))
    angles = np.mgrid[-m:m:N*1j, -m:m:N*1j].T
   
    segs, xs, ys, zs = [], [], [], []
    for i in xrange(N):
        for j in xrange(N):
            vt = v0+np.array([angles[i,j,0], angles[i,j,1], 0])
            tcoll, closest_approach = collision_time(x0=x0, v0=vt, hsq=hsq, rsq=rsq)

            if abs(closest_approach) < 2e-3:
                pos,n = position(x0, vt, tcoll)
                vel   = velocity(v0, tcoll)
                segs.append(collision_resultant(pos, vel, h))
                xs.append(pos[0])
                ys.append(pos[1])
                zs.append(pos[2])
                out[i,j] = pos[2]
   
    plotPorcupine(segs,xs,ys,zs)
    #plotPoints(xs,ys,zs)
    #pl.figure()
    #pl.imshow(out)
    return out

